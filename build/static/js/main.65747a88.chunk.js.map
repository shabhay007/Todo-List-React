{"version":3,"sources":["Todo.jsx","Todos.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","h5","theme","createMuiTheme","palette","secondary","green","Todo","todo","itemNo","handleDeleteATodo","handleEditATodo","classes","Card","className","Grid","container","direction","justify","alignItems","wrap","item","CardActionArea","CardContent","Typography","variant","CardActions","ThemeProvider","Button","size","color","onClick","Todos","todos","alignContent","spacing","map","index","key","xs","containerStyle","button","margin","h1Style","marginTop","marginBottom","formStyle","backgroundColor","borderRadius","inputStyle","App","useState","inputText","setInputText","setTodos","Container","onSubmit","e","preventDefault","autoComplete","TextField","type","value","onChange","target","id","label","disabled","startIcon","currentTodos","filter","todoItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65747a88.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Todo.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {},\r\n  h5: {},\r\n});\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    secondary: green,\r\n  },\r\n});\r\n\r\nconst Todo = ({ todo, itemNo, handleDeleteATodo, handleEditATodo}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n        wrap\r\n      >\r\n        <Grid item>\r\n          <CardActionArea>\r\n            <CardContent>\r\n              <Typography variant=\"h5\">\r\n                {itemNo}. {todo}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Grid>\r\n        <Grid item>\r\n          <CardActions>\r\n            <ThemeProvider theme={theme}>\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                color=\"secondary\"\r\n                onClick={() => handleDeleteATodo(todo)}\r\n              >\r\n                Done\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                color=\"secondary\"\r\n                onClick={() => handleEditATodo(todo)}\r\n              >\r\n                Edit\r\n              </Button>\r\n            </ThemeProvider>\r\n          </CardActions>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst Todos = ({ todos, handleDeleteATodo, handleEditATodo }) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignContent=\"center\"\r\n      spacing={1}\r\n    >\r\n      {todos.map((todo, index) => (\r\n        <Grid item key={`${todo} + ${index}`} xs={9}>\r\n          <Todo\r\n            key={`${todo} + ${index}`}\r\n            todo={todo}\r\n            itemNo={++index}\r\n            handleDeleteATodo={handleDeleteATodo}\r\n            handleEditATodo={handleEditATodo}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Todos from \"./Todos\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  containerStyle: {},\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  h1Style: {\r\n    marginTop: \"10px\",\r\n    marginBottom: \"10px\",\r\n    color: \"rgba(236, 240, 241,1.0)\",\r\n  },\r\n  formStyle: {\r\n    backgroundColor: \"rgba(247, 241, 243,1.0)\",\r\n    marginBottom: \"10px\",\r\n    borderRadius: \"20px\",\r\n  },\r\n  inputStyle: {\r\n    borderRadius: \"20px\",\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const addATodo = (e) => {\r\n    e.preventDefault();\r\n    setTodos([inputText, ...todos]);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const handleDeleteATodo = (todo) => {\r\n    const currentTodos = todos.filter((todoItem) => todoItem !== todo);\r\n    setTodos(currentTodos);\r\n  };\r\n  const handleEditATodo = (todo) => {\r\n    setInputText(todo)\r\n    const currentTodos = todos.filter((todoItem) => todoItem !== todo);\r\n    setTodos(currentTodos);\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.containerStyle}>\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n        <Grid item>\r\n          <h1 className={classes.h1Style}>Manage Your ToDo Here</h1>\r\n        </Grid>\r\n        <Grid item className={classes.formStyle}>\r\n          <form onSubmit={addATodo} autoComplete=\"off\">\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <TextField\r\n                  type=\"text\"\r\n                  value={inputText}\r\n                  onChange={(e) => setInputText(e.target.value)}\r\n                  className={classes.inputStyle}\r\n                  id=\"outlined-basic\"\r\n                  label=\"Enter Task\"\r\n                  variant=\"outlined\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  disabled={!inputText}\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"large\"\r\n                  className={classes.button}\r\n                  startIcon={<AddCircleOutlineIcon />}\r\n                >\r\n                  Add Todo\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n\r\n        <Todos todos={todos} handleDeleteATodo={handleDeleteATodo} handleEditATodo={handleEditATodo} />\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}